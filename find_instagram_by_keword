import sys
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *


class InstagramScraper(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.driver = None
        self.is_logged_in = False
        self.results = []

    def initUI(self):
        self.setWindowTitle('Instagram Scraper')
        self.setGeometry(300, 300, 800, 600)

        layout = QVBoxLayout()

        # Search Input
        input_layout = QHBoxLayout()
        self.keyword_input = QLineEdit()
        self.count_input = QSpinBox()
        self.count_input.setRange(1, 10000)
        self.count_input.setValue(20)
        self.search_btn = QPushButton('Search')

        input_layout.addWidget(QLabel('Keyword:'))
        input_layout.addWidget(self.keyword_input)
        input_layout.addWidget(QLabel('Max Users:'))
        input_layout.addWidget(self.count_input)
        input_layout.addWidget(self.search_btn)

        # Log Display
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)

        # Results Table
        self.table = QTableWidget()
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(['Username', 'Name', 'Profile URL'])

        layout.addLayout(input_layout)
        layout.addWidget(self.log_area)
        layout.addWidget(self.table)
        self.setLayout(layout)

        self.search_btn.clicked.connect(self.start_scraping)

    def log(self, message):
        self.log_area.append(f'[{time.strftime("%H:%M:%S")}] {message}')

    def start_scraping(self):
        if not self.is_logged_in:
            self.log("Please login first!")
            return

        keyword = self.keyword_input.text()
        max_users = self.count_input.value()

        self.thread = ScrapingThread(keyword, max_users, self.driver)
        self.thread.log_signal.connect(self.log)
        self.thread.result_signal.connect(self.update_results)
        self.thread.finished_signal.connect(self.on_finished)
        self.thread.start()

    def update_results(self, data):
        row = self.table.rowCount()
        self.table.insertRow(row)
        self.table.setItem(row, 0, QTableWidgetItem(data['username']))
        self.table.setItem(row, 1, QTableWidgetItem(data['name']))
        self.table.setItem(row, 2, QTableWidgetItem(data['url']))

    def on_finished(self, count):
        self.log(f"Scraping completed! Total {count} users found")
        QMessageBox.information(self, 'Completed', f'Total {count} users saved to desktop!')

    def login(self):
        self.driver = webdriver.Chrome()
        self.driver.get('https://www.instagram.com/accounts/login/')
        self.log("Please login in the opened browser window...")

        WebDriverWait(self.driver, 300).until(
            EC.url_contains('instagram.com')
        )
        self.is_logged_in = True
        self.log("Login successful!")

    def closeEvent(self, event):
        if self.driver:
            self.driver.quit()


class ScrapingThread(QThread):
    log_signal = pyqtSignal(str)
    result_signal = pyqtSignal(dict)
    finished_signal = pyqtSignal(int)

    def __init__(self, keyword, max_users, driver):
        super().__init__()
        self.keyword = keyword
        self.max_users = max_users
        self.driver = driver
        self.result_data = []

    def collect_initial_hrefs(self):
        pre_hrefs = set()
        same_count = 0
        previous_len = 0

        while len(pre_hrefs) < self.max_users and same_count < 5:
            # Find all elements with tabindex="0" and href
            elements = self.driver.find_elements(By.CSS_SELECTOR, '[tabindex="0"][href]')

            # Collect hrefs that contain "instagram.com/p"
            for elem in elements:
                href = elem.get_attribute('href')
                if href and "https://www.instagram.com/p" in href:
                    pre_hrefs.add(href)

            # Check if we found new hrefs
            if len(pre_hrefs) == previous_len:
                same_count += 1
                self.log_signal.emit(f"No new links found (attempt {same_count}/5)")
            else:
                same_count = 0
                self.log_signal.emit(f"Found {len(pre_hrefs)} post links...")

            previous_len = len(pre_hrefs)

            # Scroll down
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)

        return list(pre_hrefs)[:self.max_users]

    def get_username(self, profile_url):
        try:
            self.driver.get(profile_url)
            time.sleep(2)

            # Find all <a> elements with tabindex="0"
            elements = self.driver.find_elements(By.CSS_SELECTOR, 'a[tabindex="0"]')

            # Find the first element that contains /p/ in href
            for elem in elements:
                try:
                    href = elem.get_attribute('href')
                    if href and '/p/' in href:  # Look specifically for post links
                        # Find span element inside this anchor
                        spans = elem.find_elements(By.TAG_NAME, 'span')
                        for span in spans:
                            username = span.text
                            if username and len(username.strip()) > 0:
                                return username.strip()
                        break  # Stop after first post link
                except:
                    continue

            return None

        except Exception as e:
            self.log_signal.emit(f"Error getting username: {str(e)}")
            return None

    def get_full_name(self, profile_url):
        try:
            self.driver.get(profile_url)
            time.sleep(2)

            name_xpath = '//*[@id="mount_0_0_uJ"]/div/div/div[2]/div/div/div[1]/div[2]/div/div[1]/section/main/div/header/section[4]/div/div[1]/span'
            name = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, name_xpath))
            ).text

            return name
        except Exception as e:
            self.log_signal.emit(f"Error getting full name: {str(e)}")
            return "N/A"

    def run(self):
        try:
            # Step 1: Collect initial hrefs
            search_url = f'https://www.instagram.com/explore/search/keyword/?q={self.keyword}'
            self.driver.get(search_url)
            time.sleep(3)

            self.log_signal.emit("Starting Step 1: Collecting post links...")
            initial_hrefs = self.collect_initial_hrefs()

            # Step 2: Get usernames and create Instagram links
            self.log_signal.emit("Starting Step 2: Extracting usernames...")
            insta_links = []
            for href in initial_hrefs:
                username = self.get_username(href)
                if username:
                    insta_links.append(f'https://www.instagram.com/{username}/')

            # Step 3: Get full names and create final dataset
            self.log_signal.emit("Starting Step 3: Collecting full names...")
            for link in insta_links:
                username = link.split('/')[-2]
                name = self.get_full_name(link)

                profile_data = {
                    'username': username,
                    'name': name,
                    'url': link
                }

                self.result_data.append(profile_data)
                self.result_signal.emit(profile_data)
                self.log_signal.emit(f"Processed user: {username}")

            # Save to Excel
            df = pd.DataFrame(self.result_data)
            df.to_excel(f'{QStandardPaths.writableLocation(QStandardPaths.DesktopLocation)}/instagram_results.xlsx',
                        index=False)

            self.finished_signal.emit(len(self.result_data))

        except Exception as e:
            self.log_signal.emit(f"Error: {str(e)}")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = InstagramScraper()
    ex.show()
    ex.login()
    sys.exit(app.exec_())
